---

- name: "Manage OpenVPN clients' configurations"
  tags:
  - always
  block:
  - name: "Generate base client configuration"
    template:
      src: "templates/client.conf.base.j2"
      dest: '/opt/docker_openvpn/{{ openvpn_server.name }}/client.conf'
      mode: 0644

  - name: "Create script for generating client OpenVPN configuration"
    template:
      src: "templates/gen_openvpn_conf.j2"
      dest: '/opt/docker_openvpn/{{ openvpn_server.name }}/gen_openvpn_conf'
      mode: 0744

  - name: "Create directory for client OpenVPN configurations"
    file:
      path: "/opt/docker_openvpn/{{ openvpn_server.name }}/clients"
      state: directory
      mode: 0750

  - name: Generate configurations for OpenVPN clients
    when: item.revoked is not defined or not item.revoked
    shell: './gen_openvpn_conf {{ item.name }} {{ item.static_ip }} "{{ item.iroute | default("") }}"'
    args:
      chdir: "/opt/docker_openvpn/{{ openvpn_server.name }}"
      creates: "clients/{{ item.name }}.tar.gz"
    loop: "{{ openvpn_clients }}"
    register: clients_gen_output

- name: Copy ovpn config from server (if requested)
  tags:
  - never
  - copy-all
  - copy-ovpn
  block:
    - name: Copy ovpn config from server
      when: "gen_output.changed and gen_output.rc == 0 and 'Inline configuration is here' in gen_output.stdout"
      ansible.builtin.fetch:
        src: /opt/docker_openvpn/{{ openvpn_server.name }}/clients/{{ gen_output.item.name }}.ovpn
        dest: "{{ lookup('env', 'HOME') }}/"
        flat: yes
      loop: "{{ clients_gen_output.results | default([]) }}"
      loop_control:
        loop_var: gen_output

- name: "Copy archive with config files from server (if requested)"
  tags:
  - never
  - copy-all
  - copy-archive
  block:
    - name: "Copy archive with config files from server"
      when: "gen_output.changed and gen_output.rc == 0 and 'Configuration with certs is here' in gen_output.stdout"
      ansible.builtin.fetch:
        src: /opt/docker_openvpn/{{ openvpn_server.name }}/clients/{{ gen_output.item.name }}.tar.gz
        dest: "{{ lookup('env', 'HOME') }}/"
        flat: yes
      loop: "{{ clients_gen_output.results | default([]) }}"
      loop_control:
        loop_var: gen_output

...
